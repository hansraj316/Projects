"""
Protocol definitions for InterviewAgent

Defines interfaces for dependency injection and service contracts.
"""

from typing import Protocol, Dict, Any, Optional, List
from abc import abstractmethod
from datetime import datetime

from .exceptions import InterviewAgentException

class ILogger(Protocol):
    """Logger interface"""
    
    def debug(self, message: str, **kwargs) -> None: ...
    def info(self, message: str, **kwargs) -> None: ...
    def warning(self, message: str, **kwargs) -> None: ...
    def error(self, message: str, **kwargs) -> None: ...
    def critical(self, message: str, **kwargs) -> None: ...

class IOpenAIClient(Protocol):
    """OpenAI client interface"""
    
    def create_response(self, **kwargs) -> Any: ...
    def create_chat_completion(self, **kwargs) -> Any: ...

class IConfiguration(Protocol):
    """Configuration interface"""
    
    def get_openai_config(self) -> Dict[str, Any]: ...
    def get_database_config(self) -> Dict[str, Any]: ...
    def get_security_config(self) -> Dict[str, Any]: ...
    def is_debug_mode(self) -> bool: ...

class IEncryption(Protocol):
    """Encryption service interface"""
    
    def encrypt(self, data: str) -> str: ...
    def decrypt(self, encrypted_data: str) -> str: ...
    def hash_password(self, password: str) -> str: ...
    def verify_password(self, password: str, hashed: str) -> bool: ...

class IValidator(Protocol):
    """Input validation interface"""
    
    def validate_email(self, email: str) -> bool: ...
    def validate_api_key(self, key: str, key_type: str) -> bool: ...
    def validate_job_data(self, job_data: Dict[str, Any]) -> bool: ...
    def sanitize_input(self, input_data: str) -> str: ...

class IDatabaseConnection(Protocol):
    """Database connection interface"""
    
    def execute_query(self, query: str, params: Optional[Dict] = None) -> Any: ...
    def execute_mutation(self, mutation: str, params: Optional[Dict] = None) -> Any: ...
    def close(self) -> None: ...

class IEventBus(Protocol):
    """Event bus interface for decoupled communication"""
    
    def publish(self, event_type: str, data: Dict[str, Any]) -> None: ...
    def subscribe(self, event_type: str, handler: callable) -> None: ...
    def unsubscribe(self, event_type: str, handler: callable) -> None: ...

class IMetrics(Protocol):
    """Metrics collection interface"""
    
    def increment_counter(self, name: str, tags: Optional[Dict[str, str]] = None) -> None: ...
    def record_histogram(self, name: str, value: float, tags: Optional[Dict[str, str]] = None) -> None: ...
    def set_gauge(self, name: str, value: float, tags: Optional[Dict[str, str]] = None) -> None: ...

class IEmailService(Protocol):
    """Email service interface"""
    
    def send_email(self, to: str, subject: str, body: str, html: bool = False) -> bool: ...
    def send_template_email(self, to: str, template: str, data: Dict[str, Any]) -> bool: ...

class IWebAutomation(Protocol):
    """Web automation interface"""
    
    def navigate_to(self, url: str) -> None: ...
    def fill_form(self, form_data: Dict[str, str]) -> None: ...
    def click_element(self, selector: str) -> None: ...
    def get_page_content(self) -> str: ...
    def take_screenshot(self) -> bytes: ...